---

---

<div class="container mx-auto my-10">
	<small class="text-white">Valor de la moneda respecto a 1 USD</small>
	<table class="min-w-[100%] divide-y divide-gray-700 mx-auto">
		<thead class="bg-gray-600">
			<tr>
				<th
					scope="col"
					class="px-6 py-3 text-left text-xs font-bold text-gray-300 uppercase tracking-wider"
					>Divisa</th
				>
				<th
					scope="col"
					class="px-6 py-3 text-left text-xs font-bold text-gray-300 uppercase tracking-wider"
					>Valor (1 USD)</th
				>
			</tr>
		</thead>
		<tbody class="bg-gray-800 divide-y divide-gray-700" id="table-body">
		</tbody>
	</table>
	<div class="flex flex-col md:flex-row gap-3 my-3">
		<div class="w-full md:w-1/2">
			<select
				class="bg-gray-800 text-white cursor-pointer py-3 px-7 w-full"
				id="currency-from"
			>
			</select>
			<input
				class="bg-white p-1 h-full w-full mt-2"
				id="from"
				placeholder="Cantidad"
			/>
		</div>
		<div class="w-full md:w-1/2">
			<select
				class="bg-gray-800 text-white cursor-pointer py-3 px-7 w-full"
				id="currency-to"
			>
			</select>
			<input
				class="bg-white p-1 h-full w-full mt-2"
				id="to"
				placeholder="Resultado"
				disabled
			/>
		</div>
	</div>
</div>

<template id="currency-row">
	<tr class="hover:bg-gray-700 transition duration-150">
		<td class="px-6 py-4 whitespace-nowrap font-medium text-cyan-400" id="code">
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-gray-300" id="value"> </td>
	</tr>
</template>

<script is:inline type="module">
	let currencies = {
		USD: 0,
		COP: 0,
		UYU: 0,
		ARS: 0,
		CNY: 0,
		JPY: 0,
		PEN: 0,
		MXN: 0,
	};

	const currenciesKeys = Object.keys(currencies);

	const $table = document.querySelector("#table-body");
	const $rowTemplate = document.querySelector("#currency-row");

	const currencyMetadata = {
		USD: { flag: "ðŸ‡ºðŸ‡¸", decimals: 2 },
		COP: { flag: "ðŸ‡¨ðŸ‡´", decimals: 2 },
		UYU: { flag: "ðŸ‡ºðŸ‡¾", decimals: 2 },
		ARS: { flag: "ðŸ‡¦ðŸ‡·", decimals: 2 },
		CNY: { flag: "ðŸ‡¨ðŸ‡³", decimals: 2 },
		JPY: { flag: "ðŸ‡¯ðŸ‡µ", decimals: 2 },
		PEN: { flag: "ðŸ‡µðŸ‡ª", decimals: 2 },
		MXN: { flag: "ðŸ‡²ðŸ‡½", decimals: 2 },
	};

	function formatCurrency(value, currencyCode) {
		const metadata = currencyMetadata[currencyCode] || { decimals: 4 };
		return parseFloat(value).toLocaleString("en-US", {
			minimumFractionDigits: metadata.decimals,
			maximumFractionDigits: metadata.decimals,
		});
	}

	function renderCurrencies() {
		while ($table.firstChild) $table.removeChild($table.firstChild);
		currenciesKeys.forEach((currencyKey) => {
			const value = currencies[currencyKey];
			const $row = $rowTemplate.cloneNode(true).content.querySelector("tr");
			const $codeCell = $row.querySelector("#code");
			$codeCell.innerHTML = `${currencyMetadata[currencyKey]?.flag || ""} ${currencyKey}`;
			$row.querySelector("#value").append(formatCurrency(value, currencyKey));
			$table.appendChild($row);
		});
	}

	function getCurrenciesValues() {
		currenciesKeys.forEach(async (currency) => {
			const response = await fetch(`api/currency/${currency}`);
			const data = await response.json();
			currencies[currency] = parseFloat(data.mid).toFixed(4);
			renderCurrencies();
		});
	}

	getCurrenciesValues();

	const $from = document.querySelector("#from");
	const $currencyFrom = document.querySelector("#currency-from");
	const $to = document.querySelector("#to");
	const $currencyTo = document.querySelector("#currency-to");

	$currencyFrom.innerHTML = "";
	$currencyTo.innerHTML = "";

	function createOption(curren) {
		const option = document.createElement("option");
		option.value = curren;
		option.textContent = `${currencyMetadata[curren]?.flag || ""} ${curren}`;
		return option;
	}

	currenciesKeys.forEach((curr) =>
		$currencyFrom.appendChild(createOption(curr)),
	);
	currenciesKeys.forEach((curr) => $currencyTo.appendChild(createOption(curr)));

	function convertCurrency(amount, fromCurrency, toCurrency) {
		if (fromCurrency === toCurrency) return amount;

		const fromRate = currencies[fromCurrency];
		const toRate = currencies[toCurrency];

		if (!fromRate || !toRate) return 0;

		const usdAmount = amount / parseFloat(fromRate);
		const result = usdAmount * parseFloat(toRate);

		return result;
	}

	function formatInputValue(value, currencyCode) {
		if (value === "") return "";

		const cleanValue = value.replace(/[^0-9.]/g, "");
		if (cleanValue === "") return "";

		const parts = cleanValue.split(".");
		const integerPart = parts[0] || "0";
		const decimalPart = parts[1] || "";

		const formattedInteger = parseInt(integerPart).toLocaleString("en-US");

		if (decimalPart) {
			return `${formattedInteger}.${decimalPart}`;
		}
		return formattedInteger;
	}

	function updateConversion() {
		const rawValue = $from.value.replace(/[^0-9.]/g, "");
		const fromCurrency = $currencyFrom.value;
		const toCurrency = $currencyTo.value;

		if (rawValue && fromCurrency && toCurrency && !isNaN(rawValue)) {
			const convertedValue = convertCurrency(
				parseFloat(rawValue),
				fromCurrency,
				toCurrency,
			);
			$to.value = formatCurrency(convertedValue, toCurrency);
		} else {
			$to.value = "";
		}
	}

	$from.addEventListener("input", updateConversion);

	$from.addEventListener("blur", function (e) {
		const fromCurrency = $currencyFrom.value;

		if (this.value === "") {
			return;
		}

		const formattedValue = formatInputValue(this.value, fromCurrency);
		this.value = formattedValue;

		updateConversion();
	});

	$from.addEventListener("focus", function (e) {
		if (this.value === "") {
			return;
		}

		const cleanValue = this.value.replace(/[^0-9.]/g, "");
		this.value = cleanValue;
	});

	$currencyFrom.addEventListener("change", updateConversion);
	$currencyTo.addEventListener("change", updateConversion);
</script>
